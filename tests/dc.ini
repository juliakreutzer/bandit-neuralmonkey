[main]
name="translation with DC training"
tf_manager=<tf_manager>
output="tests/outputs/dpm"
overwrite_output_dir=True
batch_size=5
epochs=2
train_dataset=<train_data>
val_dataset=<val_data>
trainer=<trainer>
runners=[<runner>]
postprocess=None
evaluation=[("target", <bleu>)]
logging_period=20
validation_period=60
runners_batch_size=1
random_seed=1234
feedback=True

[tf_manager]
class=tf_manager.TensorFlowManager
num_threads=4
num_sessions=1

[bleu]
class=evaluators.bleu.BLEUEvaluator

[train_data]
class=dataset.load_dataset_from_files
s_source="tests/data/train.tc.en"
s_target="tests/data/train.tc.de"
s_reward="tests/data/train.bleus"
preprocessors=[("source", "source_chars", processors.helpers.preprocess_char_based)]
#lazy=True

[val_data]
class=dataset.load_dataset_from_files
s_source="tests/data/val.tc.en"
s_target="tests/data/val.tc.de"
preprocessors=[("source", "source_chars", processors.helpers.preprocess_char_based)]

[encoder_vocabulary]
class=vocabulary.from_wordlist
path="tests/outputs/vocab/encoder_vocab.tsv"

[encoder]
class=encoders.recurrent.SentenceEncoder
name="sentence_encoder"
rnn_size=7
max_input_len=10
embedding_size=11
dropout_keep_prob=0.5
data_id="source"
vocabulary=<encoder_vocabulary>

[attention]
class=attention.Attention
name="attention_sentence_encoder"
encoder=<encoder>

[decoder_vocabulary]
class=vocabulary.from_wordlist
path="tests/outputs/vocab/decoder_vocab.tsv"

[decoder]
class=decoders.decoder.Decoder
name="decoder"
encoders=[<encoder>]
rnn_size=8
embedding_size=9
attentions=[<attention>]
dropout_keep_prob=0.5
data_id="target"
max_output_len=10
vocabulary=<decoder_vocabulary>

[bandit]
class=trainers.bandit_trainer.dc_objective
decoder=<decoder>
control_variate="reweighting"
service_url="http://127.0.0.1:5000/run"
number_of_samples=5

[trainer]
class=trainers.generic_trainer.GenericTrainer
objectives=[<bandit>]
l2_weight=1.0e-8
clip_norm=1.0
optimizer=<optimizer>

[optimizer]
class=config.utils.adam_optimizer
learning_rate=1.0e-4

[runner]
class=runners.runner.GreedyRunner
decoder=<decoder>
output_series="target"
